/*
Deployment script for TreeNovelDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TreeNovelDb"
:setvar DefaultFilePrefix "TreeNovelDb"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.FORMATION\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.FORMATION\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Chapter]...';


GO
ALTER TABLE [dbo].[Chapter] DROP CONSTRAINT [FK__Chapter__UserId__47DBAE45];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Chapter]...';


GO
ALTER TABLE [dbo].[Chapter] DROP CONSTRAINT [FK__Chapter__LastCha__48CFD27E];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Comment]...';


GO
ALTER TABLE [dbo].[Comment] DROP CONSTRAINT [FK__Comment__Chapter__4AB81AF0];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Story]...';


GO
ALTER TABLE [dbo].[Story] DROP CONSTRAINT [FK__Story__LastEntry__4CA06362];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Comment]...';


GO
ALTER TABLE [dbo].[Comment] DROP CONSTRAINT [FK__Comment__UserId__49C3F6B7];


GO
PRINT N'Dropping unnamed constraint on [dbo].[Discussion]...';


GO
ALTER TABLE [dbo].[Discussion] DROP CONSTRAINT [FK__Discussio__UserI__4BAC3F29];


GO
PRINT N'Starting rebuilding table [dbo].[Category]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Category] (
    [Id]      INT           IDENTITY (1, 1) NOT NULL,
    [Name]    VARCHAR (100) NOT NULL,
    [Sidebar] VARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Name] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Category])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Category] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Category] ([Id], [Name], [Sidebar])
        SELECT   [Id],
                 [Name],
                 [Sidebar]
        FROM     [dbo].[Category]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Category] OFF;
    END

DROP TABLE [dbo].[Category];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Category]', N'Category';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Chapter]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Chapter] (
    [Id]            INT           IDENTITY (1, 1) NOT NULL,
    [Title]         VARCHAR (100) NOT NULL,
    [Date]          DATETIME      NOT NULL,
    [Content]       VARCHAR (MAX) NOT NULL,
    [UserId]        INT           NULL,
    [LastChapterId] INT           NULL,
    [Encyclopedia]  VARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Title] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Chapter])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Chapter] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Chapter] ([Id], [Title], [Date], [Content], [UserId], [LastChapterId], [Encyclopedia])
        SELECT   [Id],
                 [Title],
                 [Date],
                 [Content],
                 [UserId],
                 [LastChapterId],
                 [Encyclopedia]
        FROM     [dbo].[Chapter]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Chapter] OFF;
    END

DROP TABLE [dbo].[Chapter];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Chapter]', N'Chapter';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Comment]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Comment] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Content]   VARCHAR (1000) NOT NULL,
    [Date]      DATETIME       NOT NULL,
    [UserId]    INT            NULL,
    [ChapterId] INT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Comment])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Comment] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Comment] ([Id], [Content], [Date], [UserId], [ChapterId])
        SELECT   [Id],
                 [Content],
                 [Date],
                 [UserId],
                 [ChapterId]
        FROM     [dbo].[Comment]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Comment] OFF;
    END

DROP TABLE [dbo].[Comment];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Comment]', N'Comment';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Discussion]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Discussion] (
    [Id]      INT            IDENTITY (1, 1) NOT NULL,
    [Title]   VARCHAR (1000) NOT NULL,
    [Date]    DATETIME       NOT NULL,
    [Content] VARCHAR (MAX)  NULL,
    [UserId]  INT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Discussion])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Discussion] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Discussion] ([Id], [Title], [Date], [Content], [UserId])
        SELECT   [Id],
                 [Title],
                 [Date],
                 [Content],
                 [UserId]
        FROM     [dbo].[Discussion]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Discussion] OFF;
    END

DROP TABLE [dbo].[Discussion];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Discussion]', N'Discussion';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Story]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Story] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Title]     VARCHAR (1000) NOT NULL,
    [LastEntry] INT            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Story])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Story] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Story] ([Id], [Title], [LastEntry])
        SELECT   [Id],
                 [Title],
                 [LastEntry]
        FROM     [dbo].[Story]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Story] OFF;
    END

DROP TABLE [dbo].[Story];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Story]', N'Story';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Tag]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Tag] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [NAME] VARCHAR (100) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([NAME] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Tag])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Tag] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Tag] ([Id], [NAME])
        SELECT   [Id],
                 [NAME]
        FROM     [dbo].[Tag]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Tag] OFF;
    END

DROP TABLE [dbo].[Tag];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Tag]', N'Tag';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[User]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_User] (
    [Id]       INT          IDENTITY (1, 1) NOT NULL,
    [Username] VARCHAR (20) NOT NULL,
    [Mail]     VARCHAR (50) NOT NULL,
    [Password] VARCHAR (20) NOT NULL,
    [IsMod]    BIT          NULL,
    [IsActive] BIT          NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Username] ASC),
    UNIQUE NONCLUSTERED ([Mail] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[User])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_User] ON;
        INSERT INTO [dbo].[tmp_ms_xx_User] ([Id], [Username], [Mail], [Password], [IsMod], [IsActive])
        SELECT   [Id],
                 [Username],
                 [Mail],
                 [Password],
                 [IsMod],
                 [IsActive]
        FROM     [dbo].[User]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_User] OFF;
    END

DROP TABLE [dbo].[User];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_User]', N'User';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating unnamed constraint on [dbo].[Chapter]...';


GO
ALTER TABLE [dbo].[Chapter] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Chapter]...';


GO
ALTER TABLE [dbo].[Chapter] WITH NOCHECK
    ADD FOREIGN KEY ([LastChapterId]) REFERENCES [dbo].[Chapter] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Comment]...';


GO
ALTER TABLE [dbo].[Comment] WITH NOCHECK
    ADD FOREIGN KEY ([ChapterId]) REFERENCES [dbo].[Chapter] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Story]...';


GO
ALTER TABLE [dbo].[Story] WITH NOCHECK
    ADD FOREIGN KEY ([LastEntry]) REFERENCES [dbo].[Chapter] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Comment]...';


GO
ALTER TABLE [dbo].[Comment] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Discussion]...';


GO
ALTER TABLE [dbo].[Discussion] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Chapter'), OBJECT_ID(N'dbo.Comment'), OBJECT_ID(N'dbo.Story'), OBJECT_ID(N'dbo.Discussion'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
